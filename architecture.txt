Architecture
~~~~~~~~~~~~

1. World creator

The simulator operates on map of nodes, ISP and countries so they represent the internet, with special attention given to network speed and latency. The "world" must be reproduceable, so that others might analyse problematic issues that happen in one world but not the others. Thus the world is created from 512 bit (64bytes) seed of pseudo-random generator.

The seed is used to create "random" set of bits that are used to decide various parameters of the world. For easier implementation and to save memory, all numbers in the world are represented as power of 2. Thus word "random" in this document is not truly random, but based on seeded set of bits.

Initial parameters of world are:
* Number of countries
* number of ISPs
* number of nodes
* nodes speed dispersion (16 numbers), sum of the numbers must be 100 (meaning 100%).
* number of executors

To simplify implementation, but preserve network links effects we seek, we implement the "world" in following way:
* Each node receive 32bit digit as "IP" address
* The "IP" is constructed using bit fields, where:
  - first 8 bits is country number
  - second 8 bits is ISP number
  - next 4 bits specify node "link" type (see below)
  - rest 12 bits specify node number
  
Link types define link parameters for the node: up/down speed and latency. Up/Down speed is specified in bytes/second. Latency is specified in microseconds. Here is preliminary list of link types (Down speed/Up speed, latency):
* 0 - 56k dial up: 7KB/4.5KB,140ms
* 1 - ISDN: 16KB/16KB,10ms
* 2 - 3G,4G: 300/300KB,120ms
* 3 - satellite modem: 75/64,700ms
* 4 - ADSL1: 200/8, 80ms
* 5 - ADSL2: 3000/120, 120ms
* 16 - ethernet or colo: unlimited/unlimited,1ms

The arrangement makes it very simply to calculate link max speed/latency between two IP numbers just by looking at two "IP" numbers. For now, we can disregard cross-country and cross ISP network speeds and hard-code inter-network latencies to these:
* between different countries: 200ms
* between different ISPs of the same country: 30ms
  
The simulator is working by coordinating many computers using "master" and "starters" roles. Each computer (beside one that runs "master") runs the simulator in "starter" mode that performs the operations below:
* Connect to "master" and provide number of CPUs available
* receive list of other starters and executors
* Connect to other starters
* receive instructions on world creation
* Spawn executor for each available CPU
* Maintain "routing" of messages between executors, no tracking is done here

Once all starters are connected to master, master advertises list of all executors and their tcp/ip details, assigns each executor its number, world initiation parameters and awaits completion answer.

Each executor "creates" nodes it is responsible for using Node API.

2. The Simulation

Simulation granularity is 1 millisecond. Once all executors reported readiness, the simulation might start. Simulated milliseconds are called Epoch, starting from 0. Master acts as synchronization point, issuing command to start sumulation for given epoch and awaiting completion signals from each executor.

Master uses simulation scenario file to issue "tasks" to executors. The scenario language allows operators like these:
* Start A nodes of link type B as bootstrapping nodes
* Seed A nodes of link type B with C GB of content that is of interest by D nodes

The "pseudo random" selection of nodes in scenario uses same random seed as during world creation, thus allowing replayability of world/scenarios and getting same results.

3. Node API

Nodes interact with tested code using library-like API:
* Intialize
* register with bootstrap nodes on given "IP" numbers.
* Create A GB of content. Returns hash of the content.
* Be interested in getting content A (content identifying hash).
* Are there any unsatisfied interests? (returns yes or no)
* Receive and process transmission from IP A: (data).
* Wanna send transmission? (returns list of transmissions to send)

Transmission is process of transferring data of specified length from one node to another. Transmission is delivered to target node once it is fully "sent" by sending node and fully "received" by target node. Sending and receival progress is tracked by sending and receiving executor respectively every epoch. Transmission is started by sending data in full and creating trasmission ID (TID). At each passing epoch, sending executor updates tracking data structure on progress of the transmission, while taking into account link capacity. It then sends the transmission progress report (TPR) of each transmission to target executor. For simplicity, back-throttling is not simulated at the time.

Similarily, each executor receives transmission data and saves it aside. It then updates transmission progress data structure on each incoming TPR. Once final TPR is received, the transmission data are passed to the node.

Executor handles tracking transmissions delivery timing. For each transmission, sending executor performs these actions:
* Send transmission to target executor complete transmission data with unique ID. Compress transmission data as it is likely to contain many zeroes.
* At each epoch do below:
  - For each transmission "in flight" update transmission progress counters, send TPR to the target node
  - Once transmission is complete, it is deleted on the source node, final TPR is sent to the target node
Receiving executor performs these actions:
* Receive transmission, store data aside (in compressed state), create transmission progress data structure
* At each epoch do below:
  - For each incoming TPR, update transmission progress counters
  - Once counters show that transmission have been delivered, pass the data to the node.

The tested code should be aware of running in simulator environment. To minimise data usage, on request to create X GB of content, it is advised to fill only first 256 bytes with pseudorandom data (to get unique hash) and fill rest of it with zeroes. Similarily, it should minimise amount of disk used for storing the data.
